module GNOME {
	struct Color {
		unsigned short red, green, blue;
	};

	typedef short AppletId;
	typedef short PanelId;

	interface PanelSpot;
	interface Applet;

	interface Panel {
		enum OrientType {
		        ORIENT_UP,
	        	ORIENT_DOWN,
		        ORIENT_LEFT,
		        ORIENT_RIGHT	
		};

		enum BackType {
			BACK_NONE,
			BACK_COLOR,
			BACK_PIXMAP
		};

		union BackInfoType switch(BackType) {
			case BACK_COLOR: Color c;
			case BACK_PIXMAP: string pmap;
		};

		/* XXX do activation stuff here - the applet side of it
		   will be via a GNOME::GenericFactory (ask elliot) */

		/*this inits a panelspot, it's called by the applet */
		PanelSpot add_applet(in Applet panel_applet,
				     in string goad_id,
				     out unsigned long winid);
		oneway void quit ();

		readonly attribute boolean in_drag;
		readonly attribute OrientType orient;
	};

	interface PanelSpot { /* panel half of applets */
		/*accessors*/
		readonly attribute short spot_pos;
		attribute string tooltip;
		readonly attribute Panel parent_panel;

		/* These are exact copies of the in_drag & orient
		   attributes on parent_panel, for efficiency's sake */
		readonly attribute boolean parent_panel_in_drag;
		readonly attribute OrientType parent_panel_orient;
		
		/* the applet is all done with building itself
		   so it just tells us that it's all ready, this
		   makes the panel start the next applet (otherwise,
		   panel would stop launching applets, it's launching
		   them synchroniously for speed) also it makes this
		   applet "savable" otherwise the panel wouldn't save
		   it's state*/
		oneway void register();

		oneway void unregister();

		/* if the applet didn't call "register" yet, and wants
		   to abort itself (the panel will free up it's spot
		   and start he next applet), it should do this before
		   it exits */
		oneway void abort_load();
		
		oneway void show_menu ();
		oneway void drag_start ();
		oneway void drag_stop ();
		oneway void add_callback (in string callback_name,
					  in string stock_item,
					  in string menuitem_text);
		oneway void remove_callback (in string callback_name);
		oneway void sync_config ();
	};

	interface Applet {
		oneway void change_orient (in Panel::OrientType orient);
		oneway void do_callback (in string callback_name);
		boolean session_save (in string cfgpath,
				      in string global_cfgpath);
		oneway void back_change (in Panel::BackInfoType backing);
		oneway void set_tooltips_state (in boolean enabled);
		readonly attribute string goad_id;
	};
};
