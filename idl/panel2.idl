module GNOME {
	struct Color {
		unsigned short red, green, blue;
	};

	typedef short AppletId;
	typedef short PanelId;

	interface PanelSpot;
	interface Applet;

	interface Panel {
		enum OrientType {
		        ORIENT_UP,
	        	ORIENT_DOWN,
		        ORIENT_LEFT,
		        ORIENT_RIGHT	
		};

		enum BackType {
			BACK_NONE,
			BACK_COLOR,
			BACK_PIXMAP
		};

		union BackInfoType switch(BackType) {
			case BACK_COLOR: Color c;
			case BACK_PIXMAP: string pmap;
		};

		/* XXX do activation stuff here - the applet side of it
		   will be via a GNOME::GenericFactory (ask elliot) */

		oneway void quit ();
		readonly attribute boolean in_drag;
	};

	interface PanelSpot { /* panel half of applets */
		attribute string tooltip;
		readonly attribute Panel parent_panel;
		
		/* the applet is all done with building itself
		   so it just tells us that it's all ready, this
		   makes the panel start the next applet (otherwise,
		   panel would stop launching applets, it's launching
		   them synchroniously for speed) also it makes this
		   applet "savable" otherwise the panel wouldn't save
		   it's state*/
		oneway void register();
		/* if the applet didn't call "register" yet, and wants
		   to abort itself (the panel will free up it's spot
		   and start he next applet), it should do this before
		   it exits */
		oneway void abort_load();
		
		oneway void remove_from_panel();

		/*accessors*/
		short get_pos ();
		Panel::OrientType get_panel_orient();

		oneway void show_menu ();
		oneway void drag_start ();
		oneway void drag_stop ();
		oneway void add_callback (in string callback_name,
					  in string stock_item,
					  in string menuitem_text);
		oneway void remove_callback (in string callback_name);
		oneway void sync_config ();
	};

	interface Applet {
		/*this inits the applet, it's called by the panel, that way we
		  can get an exception if the applet is doing weird things, maybe
		  it shouldn't be one way because of this*/
		void init(in Object panel,
			  in Object panel_spot,
			  in string cfgpath,
			  in string globcfgpath,
			  in unsigned long wid);

		oneway void change_orient (in Panel::OrientType orient);
		oneway void do_callback (in string callback_name);
		short session_save (in string cfgpath,
				    in string global_cfgpath);
		oneway void back_change (in Panel::BackInfoType backing);
		oneway void set_tooltips_state (in boolean enabled);
	};
};
